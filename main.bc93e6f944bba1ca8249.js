!function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e){"use strict";function n(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),u=function(){function t(e){o(this,t),this._name=e||""}return i(t,[{key:"name",get:function(){return this._name},set:function(t){t&&(this._name=t)}}]),t}(),c=function(t){function e(){var t=arguments.length<=0||void 0===arguments[0]?"test":arguments[0];return o(this,e),n(this,Object.getPrototypeOf(e).call(this,t))}return r(e,t),e}(u),a=function(t){function e(){var t=arguments.length<=0||void 0===arguments[0]?"webpacktest":arguments[0];return o(this,e),n(this,Object.getPrototypeOf(e).call(this,t))}return r(e,t),e}(u),f=new c;console.log(f.name);var s=new a;console.log(s.name)}]);
//# sourceMappingURL=data:application/json;base64,